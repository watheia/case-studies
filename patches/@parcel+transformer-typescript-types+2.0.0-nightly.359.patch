diff --git a/node_modules/@parcel/transformer-typescript-types/lib/TSModule.js b/node_modules/@parcel/transformer-typescript-types/lib/TSModule.js
index 981ca7b..6cd9ebb 100644
--- a/node_modules/@parcel/transformer-typescript-types/lib/TSModule.js
+++ b/node_modules/@parcel/transformer-typescript-types/lib/TSModule.js
@@ -33,7 +33,7 @@ class TSModule {
     });
 
     if (imported !== '*' && imported !== 'default') {
-      this.names.set(local, imported);
+      this.names.set(local, local);
     }
   }
 
diff --git a/node_modules/@parcel/transformer-typescript-types/lib/TSModuleGraph.js b/node_modules/@parcel/transformer-typescript-types/lib/TSModuleGraph.js
index f346712..830f180 100644
--- a/node_modules/@parcel/transformer-typescript-types/lib/TSModuleGraph.js
+++ b/node_modules/@parcel/transformer-typescript-types/lib/TSModuleGraph.js
@@ -48,17 +48,13 @@ class TSModuleGraph {
 
     if (module.imports.has(name)) {
       module.used.add(name);
-      let {
-        specifier,
-        imported
-      } = (0, _nullthrows.default)(module.imports.get(name));
-      let m = this.getModule(specifier);
-
-      if (!m) {
+      let resolved = this.resolveImport(module, name);
+       // Missing or external
+       if (!resolved || resolved.module === module) {
         return;
       }
 
-      return this.markUsed(m, imported, context);
+      return this.markUsed(resolved.module, resolved.imported, context);
     }
 
     if (module.used.has(name)) {
@@ -130,8 +126,8 @@ class TSModuleGraph {
 
     return {
       module: m,
-      name: m.getName(exportName),
-      imported: e.imported || exportName
+      name: exportName,
+      imported: e.imported != null ? m.getName(e.imported) : exportName
     };
   }
 
@@ -223,6 +219,7 @@ class TSModuleGraph {
       exportedNames.set(e.name, e.module);
     } // Assign unique names across all modules
 
+    let importedSymbolsToUpdate = [];
 
     for (let m of this.modules.values()) {
       for (let [orig, name] of m.names) {
@@ -230,7 +227,13 @@ class TSModuleGraph {
           continue;
         }
 
-        if (!m.used.has(orig) || m.imports.get(orig)) {
+        if (!m.used.has(orig)) {
+          continue;
+        }
+
+        if (m.imports.has(orig)) {
+          // Update imports after all modules's local variables have been renamed
+          importedSymbolsToUpdate.push([m, orig]);
           continue;
         }
 
@@ -242,6 +245,37 @@ class TSModuleGraph {
       }
     }
 
+    let imports = new Map();
+
+    for (let [m, orig] of importedSymbolsToUpdate) {
+      let imp = (0, _nullthrows.default)(m.imports.get(orig));
+      let imported = (0, _nullthrows.default)(this.resolveImport(m, orig));
+      if (this.modules.has(imp.specifier)) {
+        m.names.set(orig, imported.importer);
+        continue;
+      }
+
+      let importedNames = imports.get(imp.specifier);
+      if (!importedNames) {
+        importedNames = new Map();
+        imports.set(imp.specifier, importedNames);
+      }
+
+      let name = importedNames.get(imported.imported);
+      if (!name) {
+        if (names[imported.imported]) {
+          name = `_${imported.imported}${names[imported.imported]++}`;
+        } else {
+          name = imported.imported;
+          names[imported.imported] = 1;
+        }
+
+        importedNames.set(imported.imported, name);
+      }
+
+      m.names.set(orig, name);
+    }
+
     return exportedNames;
   }
 
diff --git a/node_modules/@parcel/transformer-typescript-types/lib/shake.js b/node_modules/@parcel/transformer-typescript-types/lib/shake.js
index cfa096c..a88ae80 100644
--- a/node_modules/@parcel/transformer-typescript-types/lib/shake.js
+++ b/node_modules/@parcel/transformer-typescript-types/lib/shake.js
@@ -197,7 +197,7 @@ function generateImports(ts, moduleGraph) {
       } else if (imported === '*') {
         namespaceSpecifier = ts.createNamespaceImport(ts.createIdentifier(name));
       } else {
-        namedSpecifiers.push(ts.createImportSpecifier(name === imported ? undefined : ts.createIdentifier(name), ts.createIdentifier(imported)));
+        namedSpecifiers.push(ts.createImportSpecifier(name === imported ? undefined : ts.createIdentifier(imported), ts.createIdentifier(name)));
       }
     }
 
